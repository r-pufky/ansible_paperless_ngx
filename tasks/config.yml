---
###############################################################################
# Configure Services
###############################################################################
# Set configuration and migrate / update database schemas before updating
# service definitions and restarting service. Use UID/GID as some media
# filesystems may be remote.
#
# Executing python3 command directly requires first moving into the src/
# directory (due to incorrect Python path use within Paperless) or path finding
# for the config file breaks, resulting in the config consumption_dir,
# media_dir looking in default locations and mis-leading error messages:
#
#   ?: PAPERLESS_CONSUMPTION_DIR is set but doesn't exist.
#   HINT: Create a directory at /opt/paperless/paperless-ngx-X.X.X/consume
#   ?: PAPERLESS_MEDIA_ROOT is set but doesn't exist.
#   HINT: Create a directory at /opt/paperless/paperless-ngx-X.X.X/media
#
# Not resolved until Paperless migrates entirely pathlib.
#
# ImageMagick-7 now provides read/write examples which cause regex replacement
# to fail. Instead count read/write PDF lines and append at end of policy if
# not found.
#
# Reference:
# * https://docs.paperless-ngx.com/setup/#bare_metal
# * https://github.com/paperless-ngx/ansible
# * https://github.com/paperless-ngx/paperless-ngx/issues/2433
# * https://github.com/paperless-ngx/paperless-ngx/issues/9483

- name: 'Config | manage media directories'
  ansible.builtin.file:
    path: '{{ item }}'
    owner: '{{ _paperless_ngx_srv_user._uid }}'
    group: '{{ _paperless_ngx_srv_group._gid }}'
    mode: '{{ _paperless_ngx_srv_media_perms_folder.raw }}'
    state: 'directory'
  become: true
  become_user: '{{
      _paperless_ngx_srv_user.raw
      if _paperless_ngx_srv_user_data_manage_enable.raw else
      "root"
    }}'
  loop: '{{ _paperless_ngx_srv_media_folders.raw }}'

- name: 'Config | manage double-sided collate directory'
  when: _paperless_ngx_cfg_consumer_enable_collate_double_sided.raw
  ansible.builtin.file:
    path: '{{
        _paperless_ngx_cfg_consumer_collate_double_sided_subdir_name._dest
      }}'
    owner: '{{ _paperless_ngx_srv_user._uid }}'
    group: '{{ _paperless_ngx_srv_group._gid }}'
    mode: '{{ _paperless_ngx_srv_media_perms_folder.raw }}'
    state: 'directory'
  become: true
  become_user: '{{
      _paperless_ngx_srv_user.raw
      if _paperless_ngx_srv_user_data_manage_enable.raw else
      "root"
    }}'

# yamllint disable rule:line-length
- name: 'Config | set media file permissions'
  when: _paperless_ngx_srv_media_set_perms_file_enable.raw
  ansible.builtin.shell: >-
    find '{{ item }}'
    -type f
    -exec chmod {{ _paperless_ngx_srv_media_perms_file.raw }} {};
      chown {{ _paperless_ngx_srv_user._uid }}:{{ _paperless_ngx_srv_group._gid }} {} \;
  changed_when: false
  loop: '{{ _paperless_ngx_srv_media_folders.raw }}'
# yamllint enable rule:line-length

- name: 'Config | set certs'
  when: _paperless_ngx_srv_certs_path.raw | length > 0
  ansible.builtin.copy:
    src: '{{ _paperless_ngx_srv_certs_path._src }}'
    dest: '{{ _paperless_ngx_srv_certs_path._dest }}'
    owner: '{{ _paperless_ngx_srv_user._uid }}'
    group: '{{ _paperless_ngx_srv_group._gid }}'
    mode: '0600'
    directory_mode: '0750'
    force: true

- name: 'Config | set paperless config'
  ansible.builtin.template:
    src: 'paperless.conf.j2'
    dest: '{{ _paperless_ngx.symlink ~ "/paperless.conf" }}'
    owner: '{{ _paperless_ngx_srv_user._uid }}'
    group: '{{ _paperless_ngx_srv_group._gid }}'
    mode: '0640'

- name: 'Config | migrate database schema'
  ansible.builtin.shell: >-
      {{ _paperless_ngx.venv_dir ~ "/bin/python3" }}
      {{ _paperless_ngx.symlink ~ "/src/manage.py" }}
      migrate
  args:
    executable: '/bin/bash'
    chdir: '{{ _paperless_ngx.symlink ~ "/src" }}'
  become: true
  become_user: '{{ _paperless_ngx_srv_user.raw }}'
  register: _paperless_ngx_db
  changed_when: '"No migrations to apply." not in _paperless_ngx_db.stdout'

# manage_superuser will create the root user if it does not exist; no need to
# run 'manage.py createsuperuser'.
- name: 'Config | set admin user'
  ansible.builtin.shell: >-
      {{ _paperless_ngx.venv_dir ~ "/bin/python3" }}
      {{ _paperless_ngx.symlink ~ "/src/manage.py" }}
      manage_superuser
  args:
    executable: '/bin/bash'
    chdir: '{{ _paperless_ngx.symlink ~ "/src" }}'
  environment:
    PAPERLESS_ADMIN_USER: "{{ _paperless_ngx_cfg_admin_user.raw }}"
    PAPERLESS_ADMIN_MAIL: "{{ _paperless_ngx_cfg_admin_mail.raw }}"
    PAPERLESS_ADMIN_PASSWORD: "{{ _paperless_ngx_cfg_admin_password.raw }}"
  become: true
  become_user: '{{ _paperless_ngx_srv_user.raw }}'
  register: _paperless_ngx_admin
  changed_when: '"Created superuser" in _paperless_ngx_admin.stdout'
  # TODO(role): disabled until future ansible data tagging update.
  # no_log: true  # Password.

- name: 'Config | query ImageMagick PDF processing'
  ansible.builtin.shell: >-
    set -o pipefail &&
    grep -c 'rights="read|write" pattern="PDF"'
    /etc/ImageMagick-7/policy.xml
  changed_when: false
  failed_when: _paperless_ngx_policy.rc > 1
  register: _paperless_ngx_policy

# yamllint disable rule:line-length
- name: 'Config | enable ImageMagick PDF processing'
  when: _paperless_ngx_policy.stdout == '0'
  ansible.builtin.lineinfile:
    path: /etc/ImageMagick-7/policy.xml
    search_string: '</policymap>'
    line: "  <policy domain=\"coder\" rights=\"read|write\" pattern=\"PDF\" />\n</policymap>"
# yamllint enable rule:line-length

- name: 'Config | set service definitions'
  ansible.builtin.include_role:
    name: 'r_pufky.deb.systemd'
  vars:
    systemd_daemon_reload_enable: true
    systemd_services:
      - name: 'paperless-consumer'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless consumer'
          requires: ['redis.service']
        service:
          exec_start:
            - >-
              {{ _paperless_ngx.venv_dir ~ "/bin/python3" }}
              manage.py
              document_consumer
          runtime_max_sec: '{{
              "1d"
              if _paperless_ngx_srv_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:
          user: '{{ _paperless_ngx_srv_user.raw }}'
          group: '{{ _paperless_ngx_srv_group.raw }}'
          working_directory: '{{ _paperless_ngx.symlink ~ "/src" }}'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-scheduler'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless Celery Beat'
          requires: ['redis.service']
        service:
          exec_start:
            - >-
              {{ _paperless_ngx.venv_dir ~ "/bin/celery" }}
              --app paperless beat
              --loglevel
              {{ _paperless_ngx_srv_log_level.raw }}
          runtime_max_sec: '{{
              "1d"
              if _paperless_ngx_srv_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:
          user: '{{ _paperless_ngx_srv_user.raw }}'
          group: '{{ _paperless_ngx_srv_group.raw }}'
          working_directory: '{{ _paperless_ngx.symlink ~ "/src" }}'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-task-queue'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless Celery Workers'
          requires: ['redis.service']
        service:
          exec_start:
            - >-
              {{ _paperless_ngx.venv_dir ~ "/bin/celery" }}
              --app paperless worker
              --loglevel
              {{ _paperless_ngx_srv_log_level.raw }}
          runtime_max_sec: '{{
              "1d"
              if _paperless_ngx_srv_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:
          user: '{{ _paperless_ngx_srv_user.raw }}'
          group: '{{ _paperless_ngx_srv_group.raw }}'
          working_directory: '{{ _paperless_ngx.symlink ~ "/src" }}'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-webserver'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless webserver'
          requires: ['redis.service']
          after: ['network.target']
          wants: ['network.target']
        service:
          exec_start:
            - >-
              /bin/sh -c '
              exec {{ _paperless_ngx.venv_dir }}/bin/python3 -m granian
              --interface asginl
              --ws "paperless.asgi:application"
              '
          runtime_max_sec: '{{
              "1d"
              if _paperless_ngx_srv_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:  # something in execute is not parsing right
          user: '{{ _paperless_ngx_srv_user.raw }}'
          group: '{{ _paperless_ngx_srv_group.raw }}'
          working_directory: '{{ _paperless_ngx.symlink ~ "/src" }}'
          environment:
            - var: 'GRANIAN_HOST'
              value: '{{ _paperless_ngx_srv_address.raw }}'
            - var: 'GRANIAN_PORT'
              value: '{{ _paperless_ngx_srv_port.raw }}'
            - var: 'GRANIAN_WORKERS'
              value: '{{ _paperless_ngx_srv_webserver_workers.raw }}'
            - var: 'GRANIAN_URL_PATH_PREFIX'
              value:
                '{{ _paperless_ngx_cfg_force_script_name.raw }}'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-cache'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless cache management'
          requires: ['paperless-cache.timer']
          after: ['network.target']
          wants: ['network.target']
        service:
          type: 'oneshot'
          exec_start:
            - >-
              /usr/bin/find
              "{{ _paperless_ngx_cfg_convert_tmpdir.raw }}"
              -cmin +{{ _paperless_ngx_srv_cache_lifetime.raw }}
              -type f
              -delete
        exec:
          user: 'root'
          group: 'root'
          working_directory:
            '{{ _paperless_ngx_cfg_convert_tmpdir.raw }}'
        install:
          wanted_by: ['multi-user.target']
    systemd_timers:
      - name: 'paperless-cache'
        state: 'present'
        drop_in: false
        unit:
          description: 'paperless-cache.service timer'
          requires: ['paperless-cache.service']
        timer:
          unit: 'paperless-cache.service'
          on_unit_active_sec:
            '{{ _paperless_ngx_srv_cache_lifetime.data }}'
        install:
          wanted_by: ['timers.target']
