---
###############################################################################
# Configure Services
###############################################################################
# Set configuration and migrate / update database schemas before updating
# service definitions and restarting service. Use UID/GID as some media
# filesystems may be remote.
#
# Executing python3 command directly requires first moving into the src/
# directory (due to incorrect Python path use within Paperless) or path finding
# for the config file breaks, resulting in the config consumption_dir,
# media_dir looking in default locations and mis-leading error messages:
#
#   ?: PAPERLESS_CONSUMPTION_DIR is set but doesn't exist.
#   HINT: Create a directory at /opt/paperless/paperless-ngx-X.X.X/consume
#   ?: PAPERLESS_MEDIA_ROOT is set but doesn't exist.
#   HINT: Create a directory at /opt/paperless/paperless-ngx-X.X.X/media
#
# This will very likely never be fixed given shitty attitude and response of
# the developers.
#
# Args:
#   _paperless_ngx_dir: str - Path shortcut for github install location.
#
# Reference:
# * https://docs.paperless-ngx.com/setup/#bare_metal
# * https://github.com/paperless-ngx/ansible  # lol, copied my source.
# * https://github.com/paperless-ngx/paperless-ngx/issues/2433
# * https://github.com/paperless-ngx/paperless-ngx/issues/9483

- name: 'Config | manage directories'
  ansible.builtin.file:
    path: '{{ item }}'
    owner: '{{ paperless_ngx_user.parsed }}'
    group: '{{ paperless_ngx_group.parsed }}'
    mode: '{{ paperless_ngx_media_perms_folder.raw }}'
    state: 'directory'
  become: '{{ true if paperless_ngx_user_data_manage_enable.raw else omit }}'
  become_user: '{{
      paperless_ngx_user.raw
      if paperless_ngx_user_data_manage_enable.raw else
      omit
    }}'
  loop: '{{ paperless_ngx_media_folders.raw }}'

- name: 'Config | manage double-sided collate directory'
  when: paperless_ngx_config_consumer_enable_collate_double_sided.raw
  ansible.builtin.file:
    path: '{{
        paperless_ngx_config_consumer_collate_double_sided_subdir_name.parsed
      }}'
    owner: '{{ paperless_ngx_user.parsed }}'
    group: '{{ paperless_ngx_group.parsed }}'
    mode: '{{ paperless_ngx_media_perms_folder.raw }}'
    state: 'directory'
  become: '{{ true if paperless_ngx_user_data_manage_enable.raw else omit }}'
  become_user: '{{
      paperless_ngx_user.raw
      if paperless_ngx_user_data_manage_enable.raw else
      omit
    }}'

# yamllint disable rule:line-length
- name: 'Config | set media file permissions'
  when: paperless_ngx_media_set_perms_file_enable.raw
  ansible.builtin.shell: >-
    find '{{ item }}'
    -type f
    -exec chmod {{ paperless_ngx_media_perms_file.raw }} {};
      chown {{ paperless_ngx_user.parsed }}:{{ paperless_ngx_group.parsed }} {} \;
  changed_when: false
  loop: '{{ paperless_ngx_media_folders.raw }}'
# yamllint enable rule:line-length

- name: 'Config | set certs'
  when: paperless_ngx_service_certs_path.raw | length > 0
  ansible.builtin.copy:
    src: '{{ paperless_ngx_service_certs_path.parsed }}'
    dest: '{{ paperless_ngx_role_repo_extract_dir }}/certs'
    owner: '{{ paperless_ngx_user.parsed }}'
    group: '{{ paperless_ngx_group.parsed }}'
    mode: '0600'
    directory_mode: '0750'
    force: true

- name: 'Config | set paperless config'
  notify: 'Handlers | reload paperless_ngx'
  ansible.builtin.template:
    src: 'paperless.conf.j2'
    dest: '{{ _paperless_ngx_dir }}/paperless.conf'
    owner: '{{ paperless_ngx_user.parsed }}'
    group: '{{ paperless_ngx_group.parsed }}'
    mode: '0640'

- name: 'Config | migrate database schema'
  ansible.builtin.command:
    argv:
      - '{{ _avenv_venv }}/bin/python3'
      - '{{ _paperless_ngx_dir }}/src/manage.py'
      - 'migrate'
    chdir: '{{ _paperless_ngx_dir }}/src'
  become: true
  become_user: '{{ paperless_ngx_user.raw }}'
  register: _paperless_ngx_db
  changed_when: '"No migrations to apply." not in _paperless_ngx_db.stdout'

# manage_superuser will create the root user if it does not exist; no need to
# run 'manage.py createsuperuser'.
- name: 'Config | set admin user'
  ansible.builtin.command:
    argv:
      - '{{ _avenv_venv }}/bin/python3'
      - '{{ _paperless_ngx_dir }}/src/manage.py'
      - 'manage_superuser'
    chdir: '{{ _paperless_ngx_dir }}/src'
  environment:
    PAPERLESS_ADMIN_USER: "{{ paperless_ngx_config_admin_user }}"
    PAPERLESS_ADMIN_MAIL: "{{ paperless_ngx_config_admin_mail }}"
    PAPERLESS_ADMIN_PASSWORD: "{{ paperless_ngx_config_admin_password }}"
  become: true
  become_user: '{{ paperless_ngx_user.raw }}'
  register: _paperless_ngx_admin
  changed_when: '"Created superuser" in _paperless_ngx_admin.stdout'
  no_log: true  # Password.

- name: 'Config | enable ImageMagick PDF processing'
  ansible.builtin.lineinfile:
    path: '/etc/ImageMagick-6/policy.xml'
    regexp: '(\s+)<policy domain="coder" rights=".*" pattern="PDF" />'
    line: '\1<policy domain="coder" rights="read|write" pattern="PDF" />'
    backrefs: true

- name: 'Config | set service definitions'
  ansible.builtin.include_role:
    name: 'r_pufky.deb.systemd'
  vars:
    systemd_daemon_reload_enable: true
    systemd_services:
      - name: 'paperless-consumer'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless consumer'
          requires: ['redis.service']
        service:
          exec_start:
            - '{{ _avenv_venv }}/bin/python3 manage.py document_consumer'
          runtime_max_sec: '{{
              "1d"
              if paperless_ngx_service_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:
          user: '{{ paperless_ngx_user.raw }}'
          group: '{{ paperless_ngx_group.raw }}'
          working_directory: '{{ _paperless_ngx_dir }}/src'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-scheduler'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless Celery Beat'
          requires: ['redis.service']
        service:
          exec_start:
            - >-
              {{ _avenv_venv }}/bin/celery
              --app paperless beat
              --loglevel
              {{ paperless_ngx_service_log_level.raw }}
          runtime_max_sec: '{{
              "1d"
              if paperless_ngx_service_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:
          user: '{{ paperless_ngx_user.raw }}'
          group: '{{ paperless_ngx_group.raw }}'
          working_directory: '{{ _paperless_ngx_dir }}/src'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-task-queue'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless Celery Workers'
          requires: ['redis.service']
        service:
          exec_start:
            - >-
              {{ _avenv_venv }}/bin/celery
              --app paperless worker
              --loglevel
              {{ paperless_ngx_service_log_level.raw }}
          runtime_max_sec: '{{
              "1d"
              if paperless_ngx_service_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:
          user: '{{ paperless_ngx_user.raw }}'
          group: '{{ paperless_ngx_group.raw }}'
          working_directory: '{{ _paperless_ngx_dir }}/src'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-webserver'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless webserver'
          requires: ['redis.service']
          after: ['network.target']
          wants: ['network.target']
        service:
          exec_start:
            - >-
              /bin/sh -c '
              exec {{ _avenv_venv }}/bin/python3 -m granian
              --interface asginl
              --ws "paperless.asgi:application"
              '
          runtime_max_sec: '{{
              "1d"
              if paperless_ngx_service_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:  # something in execute is not parsing right
          user: '{{ paperless_ngx_user.raw }}'
          group: '{{ paperless_ngx_group.raw }}'
          working_directory: '{{ _paperless_ngx_dir }}/src'
          environment:
            - var: 'GRANIAN_HOST'
              value: '{{ paperless_ngx_service_address.raw }}'
            - var: 'GRANIAN_PORT'
              value: '{{ paperless_ngx_service_port.raw }}'
            - var: 'GRANIAN_WORKERS'
              value: '{{ paperless_ngx_service_webserver_workers.raw }}'
            - var: 'GRANIAN_URL_PATH_PREFIX'
              value:
                '{{ paperless_ngx_config_force_script_name.raw }}'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-cache'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless cache management'
          requires: ['paperless-cache.timer']
          after: ['network.target']
          wants: ['network.target']
        service:
          type: 'oneshot'
          exec_start:
            - >-
              /usr/bin/find
              "{{ paperless_ngx_config_convert_tmpdir.raw }}"
              -cmin +{{ paperless_ngx_service_cache_lifetime.raw }}
              -type f
              -delete
        exec:
          user: 'root'
          group: 'root'
          working_directory:
            '{{ paperless_ngx_config_convert_tmpdir.raw }}'
        install:
          wanted_by: ['multi-user.target']
    systemd_timers:
      - name: 'paperless-cache'
        state: 'present'
        drop_in: false
        unit:
          description: 'paperless-cache.service timer'
          requires: ['paperless-cache.service']
        timer:
          unit: 'paperless-cache.service'
          on_unit_active_sec:
            '{{ paperless_ngx_service_cache_lifetime.parsed }}'
        install:
          wanted_by: ['timers.target']
