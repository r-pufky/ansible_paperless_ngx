---
# yamllint disable rule:line-length
###############################################################################
# Configure Paperless-NGX
###############################################################################
# Set configuration and migrate / update database schemas before updating
# service definitions and restarting service.
#
# Executing python3 command directly requires first moving into the src/
# directory (due to incorrect Python path use within Paperless) or path finding
# for the config file breaks, resulting in the config consumption_dir,
# media_dir looking in default locations and mis-leading error messages:
#
#   ?: PAPERLESS_CONSUMPTION_DIR is set but doesn't exist.
#   HINT: Create a directory at /opt/paperless/paperless-ngx-X.X.X/consume
#   ?: PAPERLESS_MEDIA_ROOT is set but doesn't exist.
#   HINT: Create a directory at /opt/paperless/paperless-ngx-X.X.X/media
#
# This will very likely never be fixed given shitty attitude and response of
# the developers.
#
# Args:
#   _paperless_ngx_uid: int - Paperless-NGX user UID.
#   _paperless_ngx_gid: int - Paperless-NGX user GID.
#   _paperless_ngx_dir: str - Path shortcut for github install location.
#   _paperless_ngx_config: dict - Sanitized Paperless-NGX config.
#
# Reference:
# * https://docs.paperless-ngx.com/setup/#bare_metal
# * https://github.com/paperless-ngx/ansible  # lol, copied my source.
# * https://github.com/paperless-ngx/paperless-ngx/issues/2433
# * https://github.com/paperless-ngx/paperless-ngx/issues/9483

- name: 'Prep | set certs'
  when: paperless_ngx_service_certs_path | length > 0
  ansible.builtin.copy:
    src: '{{ paperless_ngx_service_certs_path if paperless_ngx_service_certs_path.endswith("/") else paperless_ngx_service_certs_path ~ "/" }}'
    dest: '{{ paperless_ngx_role_repo_extract_dir }}/certs'
    owner: '{{ _paperless_ngx_uid }}'
    group: '{{ _paperless_ngx_gid }}'
    mode: '0600'
    directory_mode: '0750'
    force: true

- name: 'Config | set paperless config'
  notify: 'Handlers | reload paperless_ngx'
  ansible.builtin.template:
    src: 'paperless.conf.j2'
    dest: '{{ _paperless_ngx_dir }}/paperless.conf'
    owner: '{{ _paperless_ngx_uid }}'
    group: '{{ _paperless_ngx_gid }}'
    mode: '0640'  # passwords.

- name: 'Config | migrate database schema'
  ansible.builtin.command: '{{ _avenv_venv }}/bin/python3 {{ _paperless_ngx_dir }}/src/manage.py migrate'
  args:
    chdir: '{{ _paperless_ngx_dir }}/src'
  become: true
  become_user: '{{ paperless_ngx_user }}'
  register: _paperless_ngx_db
  changed_when: '"No migrations to apply." not in _paperless_ngx_db.stdout'

# manage_superuser will create the root user if it does not exist; no need to
# run 'manage.py createsuperuser'.
- name: 'Config | set root user'
  ansible.builtin.command: "{{ _avenv_venv }}/bin/python3 {{ _paperless_ngx_dir }}/src/manage.py manage_superuser"
  args:
    chdir: '{{ _paperless_ngx_dir }}/src'
  environment:
    PAPERLESS_ADMIN_USER: "{{ paperless_ngx_config_admin_user }}"
    PAPERLESS_ADMIN_MAIL: "{{ paperless_ngx_config_admin_password }}"
    PAPERLESS_ADMIN_PASSWORD: "{{ paperless_ngx_config_admin_mail }}"
  become: true
  become_user: "{{ paperless_ngx_user }}"
  register: _paperless_ngx_admin
  changed_when: '"Created superuser" in _paperless_ngx_admin.stdout'
  no_log: true  # passwords.

- name: 'Config | enable ImageMagick PDF processing'
  ansible.builtin.lineinfile:
    path: '/etc/ImageMagick-6/policy.xml'
    regexp: '(\s+)<policy domain="coder" rights=".*" pattern="PDF" />'
    line: '\1<policy domain="coder" rights="read|write" pattern="PDF" />'
    backrefs: true

- name: 'Config | set listen {{ paperless_ngx_services_address }}:{{ paperless_ngx_services_port }}'  # noqa name[template] ip:port.
  notify: 'Handlers | reload paperless_ngx'
  ansible.builtin.lineinfile:
    path: '{{ _paperless_ngx_dir }}/gunicorn.conf.py'
    regexp: '^bind = '
    line: "bind = '{{ paperless_ngx_services_address }}:{{ paperless_ngx_services_port }}'"

- name: 'Config | set service definitions'
  ansible.builtin.include_role:
    name: 'r_pufky.srv.systemd'
  vars:
    systemd_daemon_reload_enable: true
    systemd_services:
      - name: 'paperless-consumer'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless consumer'
          requires: ['redis.service']
        service:
          exec_start: ['{{ _avenv_venv }}/bin/python3 manage.py document_consumer']
          runtime_max_sec: '{{ "1d" if paperless_ngx_service_restart_daily_enable else "infinity" }}'
        exec:
          user: '{{ paperless_ngx_user }}'
          group: '{{ paperless_ngx_group }}'
          working_directory: '{{ _paperless_ngx_dir }}/src'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-scheduler'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless Celery Beat'
          requires: ['redis.service']
        service:
          exec_start: ['{{ _avenv_venv }}/bin/celery --app paperless beat --loglevel {{ paperless_ngx_service_log_level | default("info") | upper }}']
          runtime_max_sec: '{{ "1d" if paperless_ngx_service_restart_daily_enable else "infinity" }}'
        exec:
          user: '{{ paperless_ngx_user }}'
          group: '{{ paperless_ngx_group }}'
          working_directory: '{{ _paperless_ngx_dir }}/src'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-task-queue'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless Celery Workers'
          requires: ['redis.service']
        service:
          exec_start: ['{{ _avenv_venv }}/bin/celery --app paperless worker --loglevel {{ paperless_ngx_service_log_level | default("info") | upper }}']
          runtime_max_sec: '{{ "1d" if paperless_ngx_service_restart_daily_enable else "infinity" }}'
        exec:
          user: '{{ paperless_ngx_user }}'
          group: '{{ paperless_ngx_group }}'
          working_directory: '{{ _paperless_ngx_dir }}/src'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-webserver'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless webserver'
          requires: ['redis.service']
          after: ['network.target']
          wants: ['network.target']
        service:
          exec_start: ['{{ _avenv_venv }}/bin/gunicorn -c {{ _paperless_ngx_dir }}/gunicorn.conf.py paperless.asgi:application']
          runtime_max_sec: '{{ "1d" if paperless_ngx_service_restart_daily_enable else "infinity" }}'
        exec:
          user: '{{ paperless_ngx_user }}'
          group: '{{ paperless_ngx_group }}'
          working_directory: '{{ _paperless_ngx_dir }}/src'
          protect_system: 'full'
          no_new_privileges: true
          private_users: true
          private_devices: true
        install:
          wanted_by: ['multi-user.target']
      - name: 'paperless-cache'
        state: 'present'
        drop_in: false
        unit:
          description: 'Paperless cache management'
          requires: ['paperless-cache.timer']
          after: ['network.target']
          wants: ['network.target']
        service:
          type: 'oneshot'
          exec_start: ['/usr/bin/find "{{ _paperless_ngx_config.PAPERLESS_CONVERT_TMPDIR }}" -cmin +{{ paperless_ngx_service_cache_lifetime }} -type f -delete']
        exec:
          user: 'root'
          group: 'root'
          working_directory: '{{ _paperless_ngx_config.PAPERLESS_CONVERT_TMPDIR }}'
        install:
          wanted_by: ['multi-user.target']
    systemd_timers:
      - name: 'paperless-cache'
        state: 'present'
        drop_in: false
        unit:
          description: 'paperless-cache.service timer'
          requires: ['paperless-cache.service']
        timer:
          unit: 'paperless-cache.service'
          on_unit_active_sec: '{{ paperless_ngx_service_cache_lifetime | default(30) }}m'
        install:
          wanted_by: ['timers.target']
